// dummyData.tsx

/**
 * Props type represents the expected shape of each item in the dummy data array
 */
type Props = {
  profileImg?: string;
  author: string;
  caption?: string;
  image?: string;
  likes: number;
  comments: number;
};

/**
 * An array of random images that will be used to populate the image property of each item in the dummy data array.
 */
const randomImages = [
  "https://picsum.photos/200/300",
  "https://picsum.photos/seed/picsum/200/300",
  "https://picsum.photos/200/300/?blur",
  "https://picsum.photos/id/237/200/300",
  "https://picsum.photos/200/300?grayscale",
];

/**
 * An array of random profile images that will be used to populate the profileImg property of each item in the dummy data array.
 */
const randomProfiles = [
  "https://randomuser.me/api/portraits/men/1.jpg",
  "https://randomuser.me/api/portraits/women/2.jpg",
  "https://randomuser.me/api/portraits/men/3.jpg",
  "https://randomuser.me/api/portraits/women/4.jpg",
  "https://randomuser.me/api/portraits/men/5.jpg",
  "https://randomuser.me/api/portraits/women/6.jpg",
];

/**
 * The number of items to generate in the dummy data array.
 */
const dataCount = 10;

/**
 * The range of possible likes for each item in the dummy data array.
 * Likes will be randomly generated between these two values (inclusive).
 */
const likesRange = {
  min: 0,
  max: 100,
};

/**
 * The range of possible comments for each item in the dummy data array.
 * Comments will be randomly generated between these two values (inclusive).
 */
const commentsRange = {
  min: 0,
  max: 50,
};

/**
 * The dummy data array is generated by looping over the range of dataCount
 * and randomly selecting images and profile images from the randomImages and
 * randomProfiles arrays. Likes and comments are randomly generated within the
 * ranges defined in the likesRange and commentsRange objects.
 */
export const dummyData: Props[] = [];

for (let i = 0; i < dataCount; i++) {
  const randomImageIndex = Math.floor(Math.random() * randomImages.length);
  const randomProfileIndex = Math.floor(Math.random() * randomProfiles.length);
  const likes = Math.floor(
    Math.random() * (likesRange.max - likesRange.min + 1) + likesRange.min
  );
  const comments = Math.floor(
    Math.random() * (commentsRange.max - commentsRange.min + 1) +
      commentsRange.min
  );

  dummyData.push({
    author: `User ${i + 1}`,
    profileImg: randomProfiles[randomProfileIndex],
    caption: `This is Caption ${i + 1}`,
    image: randomImages[randomImageIndex],
    likes,
    comments,
  });
}
